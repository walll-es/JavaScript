    /*
    Иногда возникает потребнасть в создании предстовление обекта виде многострочного форматированого текста но стандартные средства
    JavaScript  не всегда могут это сделать например JSON.stringify(navigator)  вернёт "{}".
    Так как объекты в переменных самого объекта могут ссылаться на самих себя или на родителей самого обекта чтобы не происходило зацикливание я ввёл понятие как степень вложености. Привожу пример использывания
    допустим мы хотим получить преметивное текстовое форматированое представлени обекта navigator вызываем функцию так f_in(navigator,5,1);
    ловим многострочный форматированый текст. Если Вы захотите сново преобразовать текст в примитивный образ обекта Вам понадобится
    убрать коментарии это можно сделать так .replace(/\/\*.*?\*\//g,'') и далие воспользоватся функцией JSON.parse().
    Вот полный пример как это выглядит let navigator_=JSON.parse(f_in(navigator,5,1).replace(/\/\*.*?\*\//g,''));.
    Таким образом можно преобразовать передать на сервер оттиск любого объекта для дальнейшего исследования. Естественно такой оттиск
    объекта не передаёт полное представление обета а лишь подробную структуру и переменные которые способен интерпретировать. Зачем эта
    функция нужна Вам лично решайте сами но мне вот лично понадобилась.
    Описание переменых функции
    obj_ обект иследования  (обязательный параметр)
    max_= степень вложености положительное целое число от 0 > (необязательный параметр по умолчанию 0)
    bac_= имена перименных обекта в ковычках или без false or true (необязательный параметр по умолчанию false)
    остольные переменные задовать ненужно так как функция замкнутая num_ и str_ являются служебными и используются самой функцией
    */
    function f_in(obj_, max_, bac_, num_, str_) {
        let txt_buf_ = '';
        if (!num_) num_ = 0;
        if (!max_) max_ = 0;
        if ((obj_ + '' != 'null')) {
            txt_buf_ += '\t'.repeat(num_) + (obj_.constructor.name == 'Array' ? '[' : '{') + '/* ' + num_ + ' '
                + obj_.constructor.name + ' */' + '\n';
            let ih_ = '';
            for (let hh_ in obj_) {
                ih_ = hh_;
            };
            for (let hh_ in obj_) {
                if ((obj_[hh_] + '' == 'null')
                    || (typeof obj_[hh_] == "number")
                    || (typeof obj_[hh_] == "boolean")) {
                    txt_buf_ += '\t'.repeat(num_) + (obj_.constructor.name != 'Array' ? (bac_ ? '"' : '') + hh_
                        + (bac_ ? '"' : '') + ": " : "") + obj_[hh_] + (ih_ == hh_ ? "" : ",") + '\n';
                } else if ((typeof obj_[hh_] == "string") || (typeof obj_[hh_] == "function")) {
                    txt_buf_ += '\t'.repeat(num_) + (obj_.constructor.name != 'Array' ? (bac_ ? '"' : '') + hh_
                        + (bac_ ? '"' : '') + ": " : "") + "\"" + (obj_[hh_] + '')
                        .replace(/"/g, '\\"').replace(/\n/g, '\\n') + "\"" + (ih_ == hh_ ? "" : ",") + '\n';
                } else {
                    if (num_ != max_) {
                        txt_buf_ += '\t'.repeat(num_) + (obj_.constructor.name != 'Array' ? (bac_ ? '"' : '')
                            + hh_ + (bac_ ? '"' : '') + ": " : "") + '\n';
                        if (obj_[hh_].constructor.name != "Window") {
                            txt_buf_ += f_in(obj_[hh_], max_, bac_, num_ + 1, (ih_ == hh_ ? "" : ","));
                        } else {
                            txt_buf_ += '"[object Window]"' + (ih_ == hh_ ? "" : ",") + '\n';
                        }
                    } else {
                        txt_buf_ += '\t'.repeat(num_) + (bac_ ? '"' : '') + hh_ + (bac_ ? '"' : '') + ": {}"
                            + (ih_ == hh_ ? "" : ",") + '\n';
                    }
                }
            }
            txt_buf_ += '\t'.repeat(num_) + (obj_.constructor.name == 'Array' ? ']' : '}')
                + (num_ > 0 ? (str_ ? str_ : '') : '') + '/* ' + num_ + ' ' + obj_.constructor.name
                + ' */' + '\n';
        };
        return txt_buf_//.replace(/\/\*.*?\*\//g,'');
    };
