/* 
Функция кодирования Base64 btoa и декодирования при помощи atob на мой взгляд не доделаны так как не понимают юникоды и эмодзи.
Для решения данной проблемы есть ряд простых решений, например такой btoa(encodeURI('🐭'));//"JUYwJTlGJTkwJUFE". 
Но эта небудет стандартный Base64 а собственно чёт знает что похоже на заштопывавшие дыры! 
Для решения этой проблемы я написал две аналогичных функции которые прекрасно справляются с данной проблемой.

btoa_('🐭');//"8J+QrQ=="
atob_("8J+QrQ==");//"🐭"
btoa_('Привет!');//"0J/RgNC40LLQtdGCIQ=="
atob_("0J/RgNC40LLQtdGCIQ==");//"Привет!"
Как видна из теста эти функции нормально кодируют и декадируют в стандартный Base64 и Вам на сервере не прийдется проводить 
двойное кодирование и декодирование для передачи данных. 
*/
btoa_=c=>c
.split('')
.map(a=>[a,a.codePointAt()])
.reduce((a,b)=>(a[0]+=(b[1]>255||b[1]<16)?b[0]:'!'+b[1].toString(16),a),[''])
.reduce((a,b)=>(a+=encodeURI(b).replace(/[!%]/g,''),a),'')
.match(/.{2}/g)
.map(a=>parseInt(a,16).toString(2))
.reduce((a,b)=>(a[0]+='0'.repeat(8-b.length)+b,a),[''])
.reduce((a,b)=>b+'0'.repeat(6-b.length%6),'')
.match(/.{6}/g).map(a=>parseInt(a,2))
.reduce((a,b)=>(a[0]+='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'[b],a),[''])
.reduce((a,b)=>b+'='.repeat(4-b.length%4),'');
//-----------------------------------------------------------------------------------------------------------
atob_=c=>c
.match(/[\w\d\+\/]/ig)
.map(a=>'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(a).toString(2))
.reduce((a,b)=>(a+=('000000'+b).slice(-6),a),'')
.match(/.{8}/g)
.map(a=>parseInt(a,2).toString(16))
.reduce((a,b)=>(a[0]+='%'+('00'+b).slice(-2),a),[''])
.reduce((a,b)=>decodeURIComponent(b),'');
